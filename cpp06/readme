Les Cast en C++:

Static method en C++:
    - method qui appartient a la classe elle meme plutot que linstance specifique de la classe
    - veut dire que l'on peut call la method sans faire une instance
    ex: ScalarConverter::convert(10.0, 2.5); directement dans le main sans devoir faire "Scalar test" test.convert

int a = 42

est le processus de convertir une variable d'un type de données en un autre

Cast ( C-LIKE )
double b = a  // implicite cast 
double c = (double) a // explicite cast

Demotion et perte de precision:

double b = a    // implicit demotion cast
int c = b       // cast hasardeux car on perd de la precision sans le stipuler
int d = (int) b // on dit a notre compilateur que nous sommmes au courant

FLAG qui n'autorise pas les cast demotion hasardeux:
    -  -Wconversion


Reinterpretation:
Syntaxe: new_type reinterpret_cast<new_type>(expression)

utilisation de: reinterpret_cast

    -   Ce type de cast est utilisé pour convertir un pointeur ou 
        une référence d'un type de données en un autre type de données totalement différent.
        ex: float a;
            void* b = &a
    
    -   Permet de traiter les bits dune variable d'un type comme si cetait dans un type sans transformer les donnees

    dans le cas dune reinterpretation descendante toujours faire explicite

exemple:
    float a;
    void*b = &a;
    int c = (int*) b


Type Qualifier Reinterpretation:
sont des mots-clés qui modifient les propriétés des types de données de base.
ex: CONST et volatile, mutable, restrict



Static CAST:

    -   static_cast effectue une vérification à la compilation pour s'assurer que la conversion est valide, tandis que le casting en style C ne fait pas cette vérification aussi strictement.
    -   bloque la conversion de type incompatible

